# Configuration file for PiCL

[picl]
enabled = true
acs_gap = 3

[picl/onchip_undo_buffer]
num_entries = 32         # 0 to ilimited

[general]
enable_icache_modeling = true

[clock_skew_minimization]
scheme = barrier

[clock_skew_minimization/barrier]
quantum = 100

[dvfs]
transition_latency = 2000 # In ns, "under 2 microseconds" according to http://download.intel.com/design/intarch/papers/323671.pdf (page 8)

[dvfs/simple]
cores_per_socket = 1

[power]
vdd = 1.2 # Volts
technology_node = 45 # nm

[perf_model/core]
core_model = nehalem
frequency = 2.0
logical_cpus = 1 # number of SMT threads per core
type = interval

[perf_model/core/interval_timer]
dispatch_width = 4
window_size = 128
num_outstanding_loadstores = 10

[perf_model/sync]
reschedule_cost = 1000

[core/hook_periodic_ins]
ins_per_core = 10000    # After how many instructions should each core increment the global HPI counter
ins_global = 30000000   # Aggregate number of instructions between HOOK_PERIODIC_INS callbacks (used as epoch interval)

[caching_protocol]
type = parametric_dram_directory_msi
variant = mesi                            # msi, mesi or mesif

[perf_model/branch_predictor]
type = pentium_m
mispredict_penalty = 8  # Reflects just the front-end portion (approx) of the penalty for Interval Simulation

[perf_model/tlb]
penalty = 30          # Page walk penalty in cycles

[perf_model/itlb]
size = 128            # Number of I-TLB entries
associativity = 4     # I-TLB associativity

[perf_model/dtlb]
size = 64             # Number of D-TLB entries
associativity = 4     # D-TLB associativity

[perf_model/stlb]
size = 512            # Number of second-level TLB entries
associativity = 4     # S-TLB associativity

[perf_model/cache]
levels = 3

[perf_model/l1_icache]
perfect = false
cache_size = 32
associativity = 4
address_hash = mask
replacement_policy = lru
data_access_time = 1
tags_access_time = 1
perf_model_type = parallel
writethrough = 1
shared_cores = 1

[perf_model/l1_dcache]
perfect = false
cache_size = 32
associativity = 4
address_hash = mask
replacement_policy = lru
data_access_time = 1
tags_access_time = 1
perf_model_type = parallel
writethrough = 1
shared_cores = 1

[perf_model/l2_cache]
perfect = false
cache_size = 256
associativity = 8
address_hash = mask
replacement_policy = lru
data_access_time = 4
tags_access_time = 3
# Total neighbor L1/L2 access time is around 40/70 cycles (60-70 when it's coming out of L1)
writeback_time = 50 # L3 hit time will be added
perf_model_type = parallel
writethrough = 0
shared_cores = 1

[perf_model/l3_cache]
cache_block_size = 64
address_hash = mask
dvfs_domain = global # L1 and L2 run at core frequency (default), L3 is system frequency
prefetcher = none
writeback_time = 0
perfect = false
cache_size = 2048
associativity = 8
replacement_policy = lru
data_access_time = 30
tags_access_time = 10
perf_model_type = parallel
writethrough = 0
shared_cores = 4

[perf_model/dram_directory]
# total_entries = number of entries per directory controller.
total_entries = 1048576
associativity = 8
directory_type = full_map

[perf_model/dram]
technology = nvm
# -1 means that we have a number of distributed DRAM controllers (4 in this case)
num_controllers = -1
controllers_interleaving = 4
# DRAM access latency in nanoseconds. Should not include L1-LLC tag access time, directory access time (14 cycles = 5.2 ns),
# or network time [(cache line size + 2*{overhead=40}) / network bandwidth = 18 ns]
# Membench says 175 cycles @ 2.66 GHz = 66 ns total
latency = 45                               # default value was = 45
read_latency = 120
write_latency = 360
per_controller_bandwidth = 7.6             # In GB/s, as measured by core_validation-dram
chips_per_dimm = 8
dimms_per_controller = 4

[network]
memory_model_1 = bus
memory_model_2 = bus

[network/bus]
bandwidth = 25.6 # in GB/s. Actually, it's 12.8 GB/s per direction and per connected chip pair
ignore_local_traffic = true # Memory controllers are on-chip, so traffic from core0 to dram0 does not use the QPI links
